<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    					http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/security 
                        http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!-- To allow standards-based @Secured annotation, enable secured-annotations
			See Spring Security 3.1 Reference 2.4 Method Security 
			- http://static.springsource.org/spring-security/site/docs/3.1.x/reference/ns-config.html#ns-protect-pointcut 
			- http://static.springsource.org/spring-security/site/docs/3.1.x/reference/appendix-namespace.html#d0e8651
			See Spring Security 3.1 Referecne 15.1.1 Common Built-In Expressions
			- http://static.springsource.org/spring-security/site/docs/3.1.x/reference/el-access.html --> 

<beans:bean id="customAuthenticationEntryPoint"
		class="com.leonti.slickpm.service.CustomAuthenticationEntryPoint">
	<beans:property name="loginFormUrl" value="/auth/login" />
</beans:bean>

	<!-- This is where we configure Spring-Security  -->
	<security:http auto-config="true" use-expressions="true" entry-point-ref="customAuthenticationEntryPoint" >

		<security:form-login
				login-page="/auth/login" 
				authentication-failure-url="/auth/login?error=true" 
				default-target-url="/"
				always-use-default-target="true" />
			
		<security:logout 
				invalidate-session="true" 
				logout-success-url="/auth/login" 
				logout-url="/auth/logout"/>
	
		<remember-me user-service-ref="userDetailsService" />
	</security:http>
 
<!-- Declare an authentication-manager to use a custom userDetailsService -->
 <security:authentication-manager>
         <security:authentication-provider user-service-ref="userDetailsService">
           <security:password-encoder ref="passwordEncoder"/>
         </security:authentication-provider>
 </security:authentication-manager>
  
 <!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
 <beans:bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>
 
 <!-- A custom service where Spring will retrieve users and their corresponding access levels  -->
 <beans:bean id="userDetailsService" class="com.leonti.slickpm.service.UserDetailsServiceImpl"/>
</beans:beans>
